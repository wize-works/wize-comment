# .github/workflows/deploy.yml

name: Build and Deploy to AKS

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: wize-comment

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      issues: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get released version from Git tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  docker-build-and-push:
    name: Build and Push Docker Image
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build and Tag Docker Image
        run: |
          docker build --no-cache \
            --label org.opencontainers.image.title="${{ env.IMAGE_NAME }}" \
            --label org.opencontainers.image.description="GraphQL API for ${{ env.IMAGE_NAME }}" \
            --label org.opencontainers.image.version="${{ needs.release.outputs.version }}" \
            --label org.opencontainers.image.revision="${{ github.sha }}" \
            --label org.opencontainers.image.source="https://github.com/${{ github.repository }}" \
            --label org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label org.opencontainers.image.authors="devs@wize.works" \
            --label org.opencontainers.image.licenses="MIT" \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }} .
          
          docker tag ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }} ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Images
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

  aks-deploy:
    name: Deploy to AKS
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production
    permissions:
      contents: write
      deployments: write
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/use-kubelogin@v1

      - uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER }}
          resource-group: ${{ secrets.AZURE_RG }}

      - name: Start GitHub Deployment
        id: deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production

      - name: Prepare Kubernetes manifests
        run: |
          export IMAGE_TAG=${{ needs.release.outputs.version }}
          export ACR_NAME=${{ secrets.ACR_NAME }}
          envsubst < deployment/deployment.yaml > deployment/deployment.final.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deployment.final.yaml
          kubectl apply -f deployment/service.yaml
          kubectl apply -f deployment/ingress.yaml
          kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n wizeworks

      - name: Finish GitHub Deployment
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
